"""
Utility functions for acquiring financial data

@author: Duncan Mazza
"""

import pandas_datareader.data as web
from pandas import DataFrame
from tests.BColors import BColors
import os
import numpy as np
import requests





class Company:
    def __init__(self, ticker: str, parent, populate_dataframe: bool = True):
        self.ticker = ticker
        self.parent = parent
        self.data_frame: DataFrame = DataFrame()
        self.initial_value = 0
        if populate_dataframe:
            self.populate_dataframe()

    def populate_dataframe(self):
        r"""
        Populates :attr:`data_frame` with stock data acquired using pandas_datareader.data. View more information
        `here <https://pandas-datareader.readthedocs.io/en/latest/remote_data.html>`__.
        """
        try:
            data_frame = web.get_data_yahoo(self.parent.ticker, self.parent.start_date, self.parent.end_date)
        except KeyError:
            print(BColors.FAIL + "There was an error accessing data for the ticker {}".format(self.parent.ticker) +
                  BColors.WHITE)
            raise Exception
        except requests.exceptions.SSLError:
            print(BColors.FAIL + "A 'requests.exceptions.SSLError' was raised, which may be indicative of a lack of "
                                 "internet connection; try again after verifying that you have a successful internet "
                                 "connection." + BColors.WHITE)
            raise requests.exceptions.SSLError
        except requests.exceptions.ConnectionError:
            print(BColors.FAIL + "A 'requests.exceptions.ConnectionError' was raised, which may be indicative of a "
                                 "lack of internet connection; try again after verifying that you have a successful "
                                 "internet connection." + BColors.WHITE)
            raise requests.exceptions.ConnectionError
        self.data_frame = data_frame

    def save_to_csv(self, file_path: str = "stock_data.csv"):
        """
        Saves :attr:`data_frame` to a csv.

        :param file_path: path to save the :ref:`DataFrame` to; if not an absolute path, then it is used as a path
        relative to the current working directory.
        """
        if self.data_frame.empty:
            self.populate_dataframe()
        if not file_path.endswith(".csv"):
            file_path += ".csv"
        if not os.path.abspath(file_path):
            file_path = os.getcwd() + file_path
        self.data_frame.to_csv(file_path)

    def return_numpy_array_of_company_daily_stock_close(self) -> np.ndarray:
        """
        Returns a numpy array of the "Close" column of :attr:`data_frame`.

        :return: numpy array of closing stock prices indexed by day
        """
        if self.data_frame.empty:
            self.populate_dataframe()
        return np.array(self.data_frame["Close"])

    def return_numpy_array_of_company_daily_stock_percent_change(self) -> np.ndarray:
        """
        Converts the numpy array of the closing stock data (acquired by calling
        :method:`return_numpy_array_of_company_daily_stock_close`) into an array of day-over-day percent change.

        :return: numpy array of length 1 less than the array generated by
        :method:`return_numpy_array_of_company_daily_stock_close`
        """
        daily_stock_data = self.return_numpy_array_of_company_daily_stock_close()
        start_array: np.ndarray = daily_stock_data[:-1]
        end_array: np.ndarray = daily_stock_data[1:]
        return (end_array - start_array) / start_array

# if __name__ == "__main__":
    # stock_data = numpy_array_of_company_daily_stock_close_yahoo('IBM', datetime(2017, 2, 9), datetime(2017, 2, 11))
